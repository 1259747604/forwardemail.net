{"version":3,"sources":["js/lazyload.js"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","root","factory","exports","module","define","amd","LazyLoad","global","this","window","defaults","src","srcset","selector","rootMargin","threshold","extend","extended","deep","i","length","arguments","Object","toString","call","merge","obj","prop","hasOwnProperty","images","options","settings","document","querySelectorAll","observer","init","IntersectionObserver","self","observerConfig","entries","Array","forEach","entry","isIntersecting","unobserve","target","getAttribute","tagName","toLowerCase","style","backgroundImage","image","observe","loadImages","loadAndDestroy","destroy","disconnect","lazyload","jQuery","$","fn","attribute","makeArray"],"mappings":"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","file":"lazyload.js","sourcesContent":["/*!\n * Lazy Load - JavaScript plugin for lazy loading images\n *\n * Copyright (c) 2007-2019 Mika Tuupola\n *\n * Licensed under the MIT license:\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * Project home:\n *   https://appelsiini.net/projects/lazyload\n *\n * Version: 2.0.0-rc.2\n *\n */\n\n(function (root, factory) {\n    if (typeof exports === \"object\") {\n        module.exports = factory(root);\n    } else if (typeof define === \"function\" && define.amd) {\n        define([], factory);\n    } else {\n        root.LazyLoad = factory(root);\n    }\n}) (typeof global !== \"undefined\" ? global : this.window || this.global, function (root) {\n\n    \"use strict\";\n\n    if (typeof define === \"function\" && define.amd){\n        root = window;\n    }\n\n    const defaults = {\n        src: \"data-src\",\n        srcset: \"data-srcset\",\n        selector: \".lazyload\",\n        root: null,\n        rootMargin: \"0px\",\n        threshold: 0\n    };\n\n    /**\n    * Merge two or more objects. Returns a new object.\n    * @private\n    * @param {Boolean}  deep     If true, do a deep (or recursive) merge [optional]\n    * @param {Object}   objects  The objects to merge together\n    * @returns {Object}          Merged values of defaults and options\n    */\n    const extend = function ()  {\n\n        let extended = {};\n        let deep = false;\n        let i = 0;\n        let length = arguments.length;\n\n        /* Check if a deep merge */\n        if (Object.prototype.toString.call(arguments[0]) === \"[object Boolean]\") {\n            deep = arguments[0];\n            i++;\n        }\n\n        /* Merge the object into the extended object */\n        let merge = function (obj) {\n            for (let prop in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n                    /* If deep merge and property is an object, merge properties */\n                    if (deep && Object.prototype.toString.call(obj[prop]) === \"[object Object]\") {\n                        extended[prop] = extend(true, extended[prop], obj[prop]);\n                    } else {\n                        extended[prop] = obj[prop];\n                    }\n                }\n            }\n        };\n\n        /* Loop through each object and conduct a merge */\n        for (; i < length; i++) {\n            let obj = arguments[i];\n            merge(obj);\n        }\n\n        return extended;\n    };\n\n    function LazyLoad(images, options) {\n        this.settings = extend(defaults, options || {});\n        this.images = images || document.querySelectorAll(this.settings.selector);\n        this.observer = null;\n        this.init();\n    }\n\n    LazyLoad.prototype = {\n        init: function() {\n\n            /* Without observers load everything and bail out early. */\n            if (!root.IntersectionObserver) {\n                this.loadImages();\n                return;\n            }\n\n            let self = this;\n            let observerConfig = {\n                root: this.settings.root,\n                rootMargin: this.settings.rootMargin,\n                threshold: [this.settings.threshold]\n            };\n\n            this.observer = new IntersectionObserver(function(entries) {\n                Array.prototype.forEach.call(entries, function (entry) {\n                    if (entry.isIntersecting) {\n                        self.observer.unobserve(entry.target);\n                        let src = entry.target.getAttribute(self.settings.src);\n                        let srcset = entry.target.getAttribute(self.settings.srcset);\n                        if (\"img\" === entry.target.tagName.toLowerCase()) {\n                            if (src) {\n                                entry.target.src = src;\n                            }\n                            if (srcset) {\n                                entry.target.srcset = srcset;\n                            }\n                        } else {\n                            entry.target.style.backgroundImage = \"url(\" + src + \")\";\n                        }\n                    }\n                });\n            }, observerConfig);\n\n            Array.prototype.forEach.call(this.images, function (image) {\n                self.observer.observe(image);\n            });\n        },\n\n        loadAndDestroy: function () {\n            if (!this.settings) { return; }\n            this.loadImages();\n            this.destroy();\n        },\n\n        loadImages: function () {\n            if (!this.settings) { return; }\n\n            let self = this;\n            Array.prototype.forEach.call(this.images, function (image) {\n                let src = image.getAttribute(self.settings.src);\n                let srcset = image.getAttribute(self.settings.srcset);\n                if (\"img\" === image.tagName.toLowerCase()) {\n                    if (src) {\n                        image.src = src;\n                    }\n                    if (srcset) {\n                        image.srcset = srcset;\n                    }\n                } else {\n                    image.style.backgroundImage = \"url('\" + src + \"')\";\n                }\n            });\n        },\n\n        destroy: function () {\n            if (!this.settings) { return; }\n            this.observer.disconnect();\n            this.settings = null;\n        }\n    };\n\n    root.lazyload = function(images, options) {\n        return new LazyLoad(images, options);\n    };\n\n    if (root.jQuery) {\n        const $ = root.jQuery;\n        $.fn.lazyload = function (options) {\n            options = options || {};\n            options.attribute = options.attribute || \"data-src\";\n            new LazyLoad($.makeArray(this), options);\n            return this;\n        };\n    }\n\n    return LazyLoad;\n});\n"]}