if !isHelp && user && !isBot(ctx.get('User-Agent'))
  #modal-help.modal.fade(
    tabindex="-1",
    role="dialog",
    aria-labelledby="modal-help-title",
    aria-hidden="true"
  )
    .modal-dialog.modal-lg(role="document")
      .modal-content
        .modal-header.text-center.d-block
          #modal-help-title.h4.d-inline-block.ml-4= t("Ask a question")
          button.close(type="button", data-dismiss="modal", aria-label="Close")
            span(aria-hidden="true") &times;
        .modal-body
          form.ajax-form.confirm-prompt(action=l("/help"), method="POST")
            if ctx.pathWithoutLocale !== '/faq'
              p.text-center.font-weight-bold
                != t('Have you read our <a href="%s" target="_blank" rel="noopener noreferrer">FAQ</a> yet?', domain && domain.name ? l(`/faq?domain=${domain.name}`) : l("/faq"))
            .form-group.floating-label
              textarea#input-message.form-control(
                rows="8",
                required,
                maxlength=config.supportRequestMaxLength,
                name="message",
                placeholder=t("Write your message")
              )
              label(for="input-message")= t("Message")
            if config.turnstileEnabled
              noscript
                .alert.alert-danger.font-weight-bold.text-center.border-top-0.border-left-0.border-right-0.rounded-0.small!= t("Please enable JavaScript to use our website.")
              .cf-explicit-turnstile
            button.btn.btn-block.btn-success.btn-lg(
              type="submit",
              data-toggle="tooltip",
              data-container="body",
              data-placement="bottom",
              title=t("We'll be in contact with you!")
            )= t("Send message")

if !user && !registerOrLogin
  include _register-or-login
  if !isBot(ctx.get('User-Agent')) && ctx.pathWithoutLocale !== '/register' && ctx.pathWithoutLocale !== config.loginRoute
    each verb in [ 'sign up', 'sign in' ]
      .modal.fade(
        tabindex="-1",
        role="dialog",
        id=`modal-${dashify(verb)}`,
        aria-labelledby=`modal-${dashify(verb)}-title`,
        aria-hidden="true"
      )
        .modal-dialog(role="document")
          .modal-content
            .modal-header.text-center.d-block
              .h4.d-inline-block.ml-4(id=`modal-${dashify(verb)}-title`)
                if verb === 'sign up'
                  = t("Sign up free")
                else
                  = t("Welcome back!")
              button.close(
                type="button",
                data-dismiss="modal",
                aria-label="Close"
              )
                span(aria-hidden="true") &times;
            .modal-body
              +registerOrLogin(verb, true)
nav.navbar.navbar-expand-lg.fixed-top(
  class=user ? "navbar-dark bg-dark border-bottom" : ctx.pathWithoutLocale === "/" && !isBot(ctx.get("User-Agent")) ? "text-white" : "bg-white navbar-themed bg-themed border-bottom"
)
  div(
    class=ctx.pathWithoutLocale.startsWith("/admin/") || ctx.pathWithoutLocale.startsWith("/my-account/logs") || ctx.pathWithoutLocale.startsWith("/my-account/emails") || (typeof isContainerFluid === "boolean" && isContainerFluid === true) ? "container-fluid" : "container"
  )
    a.navbar-brand.d-inline-block.m-0(
      href=user ? l(config.passportCallbackOptions.successReturnToOrRedirect) : l()
    )
      span.sr-only.sr-only-focusable Forward Email
      include ../../assets/img/logo-square-30-30.svg
      span.h4.m-0.align-middle.no-js.font-weight-bold.ml-2(
        class=isBot(ctx.get("User-Agent")) ? "d-none d-md-inline-block" : "d-inline-block text-themed"
      )= "Forward Email"
    - const isDomainSpecificUpgrade = domain && domain.name ? ctx.pathWithoutLocale === `/my-account/domains/${domain.name}/billing` : false;
    if user && user.plan === 'free' && !domain && Array.isArray(domains)
      - const filteredDomains = domains.filter((domain) => domain.plan === "free" && !domain.is_global && domain.group === "admin");
      if filteredDomains.length > 0
        - domain = filteredDomains[0];
    if user && user.plan === 'free' && ctx.pathWithoutLocale !== config.verifyRoute && ctx.pathWithoutLocale !== '/my-account/domains/new' && !ctx.pathWithoutLocale.startsWith('/my-account/billing') && !isDomainSpecificUpgrade
      ul.list-inline.ml-auto.mr-3.d-inline-block.d-lg-none.mb-0
        a.btn.btn-sm.btn-danger(
          href=domain && domain.name ? l(`/my-account/domains/${domain.name}/billing?plan=enhanced_protection`) : l("/my-account/billing/upgrade?plan=enhanced_protection")
        )
          = t("Upgrade")
    else if !user
      ul.list-inline.ml-auto.d-inline-block.d-lg-none.mb-0
        //- do same for noscript
        if !isBot(ctx.get('User-Agent'))
          noscript
            li.list-inline-item
              a.btn.btn-link.text-themed.btn-sm(
                href=l("/private-business-email?pricing=true"),
                class=ctx.pathWithoutLocale.startsWith("/private-business-email") ? "text-decoration-underline" : ""
              )
                != t("Features &amp; Pricing")
            li.list-inline-item
              a.btn.btn-link.text-themed.btn-sm(
                href=l("/faq"),
                class=ctx.pathWithoutLocale.startsWith("/faq") ? "text-decoration-underline" : ""
              )
                = t("FAQ")
        if !isBot(ctx.get('User-Agent'))
          if ctx.pathWithoutLocale !== config.loginRoute
            li.list-inline-item.d-none.d-sm-inline-block.d-lg-none
              a.btn.btn-link.btn-sm.text-themed(
                role=isRegisterOrLogin ? "link" : "button",
                href=l(config.loginRoute),
                data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                data-target=isRegisterOrLogin ? false : "#modal-sign-in"
              )= t("Log in")
          if ctx.pathWithoutLocale !== '/register'
            li.list-inline-item.d-inline-block.d-lg-none
              a.btn.btn-sm.btn-success.text-uppercase.font-weight-bold(
                href=l("/register"),
                data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                data-target=isRegisterOrLogin ? false : "#modal-sign-up"
              )
                span.d-inline-block.d-sm-none
                  = t("Signup")
                span.d-none.d-sm-inline-block
                  = t("Sign up free")
      .no-js.is-bot.d-inline-block.mr-3
    if !isBot(ctx.get('User-Agent'))
      button.navbar-toggler.d-lg-none.no-js.text-themed(
        type="button",
        data-toggle="collapse",
        data-target="#navbar-header",
        aria-controls="navbar-header",
        aria-expanded="false",
        aria-label=t("Toggle navigation")
      )
        i.fas.fa-bars
    //- once we have responsive border utilities added to bootstrap
    //- then we can apply them to the anchor tags inside the navbar
    //- so that on mobile devices there is no border around the links
    //- <https://github.com/twbs/bootstrap/issues/25030>
    #navbar-header.collapse.navbar-collapse
      ul.navbar-nav.ml-auto.mt-2.mt-md-0
        if user && user.plan === 'free' && ctx.pathWithoutLocale !== config.verifyRoute && ctx.pathWithoutLocale !== '/my-account/domains/new' && !ctx.pathWithoutLocale.startsWith('/my-account/billing') && !isDomainSpecificUpgrade && ctx.pathWithoutLocale !== '/denylist'
          li.nav-item.mr-md-3.d-none.d-md-inline-block
            a.btn.btn-danger.d-block.text-left(
              href=domain && domain.name ? l(`/my-account/domains/${domain.name}/billing?plan=enhanced_protection`) : l("/my-account/billing/upgrade?plan=enhanced_protection")
            )
              = t("Upgrade")

        //- Pricing
        - let hasPricingLink = false;
        if !isBot(ctx.get('User-Agent')) && (!user || user.plan === 'free')
          - hasPricingLink = true
          li.nav-item
            a.btn.btn-link.d-block.text-left(
              href=l('/private-business-email?pricing=true'),
              class=ctx.pathWithoutLocale === '/private-business-email'  ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
            )= t("Pricing")

        //- Resources
        - const resourcePages = ["/encrypted-email", "/private-business-email", "/faq", "/help", "/disposable-addresses", "/report-abuse"];
        - const companyPages = ["/about", "/privacy", "/terms"];
        - const isResourcesPage = (ctx.pathWithoutLocale === "/resources" || resourcePages.includes(ctx.pathWithoutLocale) || companyPages.includes(ctx.pathWithoutLocale)) && !hasPricingLink;
        li.nav-item.dropdown.no-js
          form.mb-0
            a#navbar-dropdown-resources.btn.dropdown-toggle.d-block.text-left.no-js(
              href=l("/resources"),
              data-toggle="dropdown",
              data-boundary="window",
              aria-haspopup="true",
              aria-expanded="false",
              class=isResourcesPage ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
            )
              = t("Resources")
            .dropdown-menu(aria-labelledby="navbar-dropdown-resources")
              each resourcePage in resourcePages
                if resourcePage === '/private-business-email'
                  - let pricingPageHref = domain && domain.name ? l(`/private-business-email?domain=${domain.name}`) : l("/private-business-email");
                  if !isBot(ctx.get('User-Agent'))
                    - pricingPageHref += "?pricing=true";
                  a.dropdown-item(
                    href=pricingPageHref,
                    class=ctx.pathWithoutLocale === resourcePage ? "active" : ""
                  )!= t("Features &amp; Pricing")
                else
                  a.dropdown-item(
                    href=l(resourcePage),
                    class=ctx.pathWithoutLocale === resourcePage ? "active" : ""
                  )
                    if resourcePage === '/faq'
                      = t("Frequently Asked Questions")
                    else
                      = t(titleize(humanize(resourcePage.replace("/", ""))))
              hr.dropdown-divider
              h6.dropdown-header.text-uppercase= t("Community")
              a.dropdown-item(
                href="https://github.com/forwardemail",
                target="_blank",
                rel="noopener noreferrer",
                data-toggle="tooltip",
                data-title=t("100% open-source software"),
                data-placement="bottom"
              )
                = "GitHub"
                = " "
                i.fa.fa-fw.fa-github
              a.dropdown-item(
                href="https://youtube.com/forwardemail",
                target="_blank",
                rel="noopener noreferrer",
                data-toggle="tooltip",
                data-title=t("Watch our YouTube channel"),
                data-placement="bottom"
              )
                = "YouTube"
                = " "
                i.fab.fa-fw.fa-youtube.text-danger
              hr.dropdown-divider
              h6.dropdown-header.text-uppercase= t("Company")
              each companyPage in companyPages
                a.dropdown-item(
                  href=l(companyPage),
                  class=ctx.pathWithoutLocale === companyPage ? "active" : ""
                )
                  = t(titleize(humanize(companyPage.replace("/", ""))))
              a.dropdown-item(
                href=`mailto:careers@${config.supportEmail.split('@')[1]}`,
                target="_blank",
                rel="noopener noreferrer",
                data-toggle="tooltip",
                data-title=t("Send us an email"),
                data-placement="bottom"
              )= t("Careers")
              if !isBot(ctx.get('User-Agent'))
                a.dropdown-item(
                  href="https://status.forwardemail.net/",
                  target="_blank",
                  rel="noopener noreferrer",
                  data-toggle="tooltip",
                  data-title=statusOutage ? t("Issue Detected") : t("100% Systems Online"),
                  data-placement="bottom"
                )
                  = t("Status Page")
                  = " "
                  if statusOutage
                    span.badge.badge-pill.badge-warning.text-monospace= t("Issue")
                  else
                    span.badge.badge-pill.badge-success.text-monospace= t("100%")

        //- Guides
        li.nav-item.dropdown.no-js
          form.mb-0
            a#navbar-dropdown-guides.btn.dropdown-toggle.d-block.text-left.no-js(
              href=l("/guides"),
              data-toggle="dropdown",
              data-boundary="window",
              aria-haspopup="true",
              aria-expanded="false",
              data-display="static",
              class=ctx.pathWithoutLocale.startsWith("/guides") ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
            )
              = t("Guides")
            .dropdown-menu.dropdown-menu-xl-left(
              class=user ? "dropdown-menu-md-right dropdown-menu-lg-right" : "dropdown-menu-md-left dropdown-menu-lg-left",
              aria-labelledby="navbar-dropdown-guides"
            )
              h6.dropdown-header.text-uppercase= t("Outbound SMTP")
              a.dropdown-item(
                href=l("/guides/send-email-with-custom-domain-smtp"),
                class=ctx.pathWithoutLocale === "/guides/send-email-with-custom-domain-smtp" ? "active" : ""
              )
                = t("Send Email with Custom Domain")
              a.dropdown-item(
                href=l("/guides/send-mail-as-gmail-custom-domain"),
                class=ctx.pathWithoutLocale === "/guides/send-mail-as-gmail-custom-domain" ? "active" : ""
              )
                = t("Send Mail As with Gmail")
              hr.dropdown-divider
              h6.dropdown-header.text-uppercase= t("Email Setup Guides")
              .card-columns.small
                each provider in nsProviders
                  - const classes = [];
                  if ctx.pathWithoutLocale === `/guides/${provider.slug}`
                    - classes.push("active");
                  if provider.gif || provider.video
                    - classes.push("font-weight-bold");
                  a.dropdown-item(
                    title=striptags(t('<span class="notranslate">%s</span> Email Server Setup', provider.name)),
                    href=domain && domain.name ? l(`/guides/${provider.slug}?domain=${domain.name}`) : l(`/guides/${provider.slug}`),
                    class=classes.join(" ")
                  )
                    if isBot(ctx.get('User-Agent'))
                      != t('<span class="notranslate">%s</span> Email Server Setup', provider.name)
                    else
                      = provider.name
              hr.dropdown-divider
              a.dropdown-item(href=l("/faq#table-dns-management-by-registrar"))= t("Other providers")

        //- Developers
        li.nav-item.dropdown.no-js
          form.mb-0
            a#navbar-dropdown-docs.btn.dropdown-toggle.d-block.text-left.no-js(
              href=l("/docs"),
              data-toggle="dropdown",
              data-boundary="window",
              aria-haspopup="true",
              aria-expanded="false",
              class=ctx.pathWithoutLocale.startsWith("/docs") || ctx.pathWithoutLocale.startsWith("/open-source") ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
            )
              = t("Developers")
            .dropdown-menu.dropdown-menu-right(
              aria-labelledby="navbar-dropdown-docs"
            )
              a.dropdown-item(
                href=l("/email-api"),
                class=ctx.pathWithoutLocale === "/email-api" ? "active" : ""
              )= t("Email API Reference")
              a.dropdown-item(
                href=l("/free-email-webhooks"),
                class=ctx.pathWithoutLocale === "/free-email-webhooks" ? "active" : ""
              )= t("Free Email Webhooks")
              a.dropdown-item(
                href=l("/email-forwarding-regex-pattern-filter"),
                class=ctx.pathWithoutLocale === "/email-forwarding-regex-pattern-filter" ? "active" : ""
              )= t("Regex Email Forwarding")
              if developerDocs.length > 0
                hr.dropdown-divider
                h6.dropdown-header.text-uppercase= t("Code Examples")
                .small
                  each doc in developerDocs
                    a.dropdown-item(
                      href=l(doc.slug),
                      class=ctx.pathWithoutLocale === doc.slug ? "active" : ""
                    )
                      if !isBot(ctx.get('User-Agent')) && doc.icon
                        i(class=doc.icon)
                        = " "
                      = t(doc.title)
              if platforms.length > 0 && isBot(ctx.get('User-Agent'))
                hr.dropdown-divider
                h6.dropdown-header.text-uppercase= t("Open Source Server Setup")
                .card-columns.small
                  each platform in platforms
                    a.dropdown-item(
                      href=l(`/open-source/${dashify(platform)}-email-server`),
                      title=striptags(t('Open Source <span class="notranslate">%s</span> Email Server', platform)),
                      class=ctx.pathWithoutLocale === `/open-source/${dashify(platform)}-email-server` ? "active" : ""
                    )
                      != t('<span class="notranslate">%s</span> Email Server', platform)

        //- links that show only if you're logged in
        if user
          //- links that show if you're an admin
          if user.group === 'admin'
            li.nav-item.dropdown.ml-lg-1.mt-1.mt-lg-0
              form.mb-0
                a#navbar-dropdown-admin.btn.dropdown-toggle.d-block.text-left(
                  href=l("/admin"),
                  data-toggle="dropdown",
                  data-boundary="window",
                  aria-haspopup="true",
                  aria-expanded="false",
                  class=ctx.pathWithoutLocale.startsWith("/admin") ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
                )
                  = t("Admin")
                .dropdown-menu(aria-labelledby="navbar-dropdown-admin")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale === "/admin" ? "active" : "",
                    href=l("/admin")
                  )= t("Dashboard")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/admin/users") ? "active" : "",
                    href=l("/admin/users")
                  )= t("Users")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/admin/domains") ? "active" : "",
                    href=l("/admin/domains")
                  )= t("Domains")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/admin/emails") ? "active" : "",
                    href=l("/admin/emails")
                  )= t("Emails")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/admin/logs") ? "active" : "",
                    href=l("/admin/logs")
                  )= t("Logs")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/admin/allowlist") ? "active" : "",
                    href=l("/admin/allowlist")
                  )= t("Allowlist")
                  a.dropdown-item(
                    class=ctx.pathWithoutLocale.startsWith("/admin/denylist") ? "active" : "",
                    href=l("/admin/denylist")
                  )= t("Denylist")
          li.nav-item.dropdown.ml-lg-1.mt-1.mt-lg-0
            form.mb-0
              a#navbar-dropdown-my-account.btn.dropdown-toggle.d-block.text-left(
                href=l("/my-account"),
                data-toggle="dropdown",
                data-boundary="window",
                aria-haspopup="true",
                aria-expanded="false",
                class=ctx.pathWithoutLocale.startsWith("/my-account") ? `btn-link ${user ? "text-white" : "text-themed"} text-decoration-underline` : `btn-link ${user ? "text-white" : "text-themed"}`
              )
                = t("My Account")
              .dropdown-menu(aria-labelledby="navbar-dropdown-my-account")
                //- a.dropdown-item(class=ctx.pathWithoutLocale === '/my-account' ? 'active' : '', href=l('/my-account'))= t('Dashboard')
                a.dropdown-item(
                  class=ctx.pathWithoutLocale.startsWith("/my-account/domains") ? "active" : "",
                  href=l("/my-account/domains")
                )= t("Domains")
                a.dropdown-item(
                  class=ctx.pathWithoutLocale.startsWith("/my-account/emails") ? "active" : "",
                  href=l("/my-account/emails")
                )= t("Emails")
                a.dropdown-item(
                  class=ctx.pathWithoutLocale.startsWith("/my-account/logs") ? "active" : "",
                  href=l("/my-account/logs")
                )= t("Logs")
                a.dropdown-item(
                  class=ctx.pathWithoutLocale === "/my-account/profile" ? "active" : "",
                  href=l("/my-account/profile")
                )= t("Profile")
                a.dropdown-item(
                  class=ctx.pathWithoutLocale === "/my-account/billing" ? "active" : "",
                  href=l("/my-account/billing")
                )= t("Billing")
                a.dropdown-item(
                  class=ctx.pathWithoutLocale === "/my-account/security" ? "active" : "",
                  href=l("/my-account/security")
                )= t("Security")
                a.dropdown-item(href=l("/logout"))= t("Sign out")
        //- links that show only if you're logged out
        else
          if ctx.pathWithoutLocale !== config.loginRoute
            li.nav-item.ml-0.ml-lg-3
              a.btn.btn-link.text-themed.d-block.text-left(
                role=isRegisterOrLogin ? "link" : "button",
                href=l(config.loginRoute),
                data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                data-target=isRegisterOrLogin ? false : "#modal-sign-in"
              )= t("Log in")
          if ctx.pathWithoutLocale !== '/register'
            li.nav-item.ml-0.ml-lg-3
              a.btn.btn-link.d-block.d-lg-none.text-left.font-weight-bold.text-success(
                href=l("/register"),
                data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                data-target=isRegisterOrLogin ? false : "#modal-sign-up"
              )
                = t("Sign up free")
              a.btn.btn-success.text-left.text-uppercase.font-weight-bold.d-none.d-lg-block(
                href=l("/register"),
                data-toggle=isRegisterOrLogin ? false : "modal-anchor",
                data-target=isRegisterOrLogin ? false : "#modal-sign-up"
              )
                = t("Sign up free")
if user
  noscript
    .alert.alert-danger.font-weight-bold.text-center.border-top-0.border-left-0.border-right-0.rounded-0.small!= t("Please enable JavaScript to use our website.")
//-.
  else if !isBot(ctx.get('User-Agent')) && dayjs().isBefore(dayjs('1/1/24', 'M/D/YY')) && ctx.pathWithoutLocale === '/' || (ctx.pathWithoutLocale === '/private-business-email' && ctx.query.pricing !== 'true')
    div.text-center.my-3.text-uppercase.lead
      a.badge.badge-pill.badge-primary(
        href=l("/faq#do-you-support-sending-email-with-smtp")
      )= t("Outbound SMTP is now available!")
